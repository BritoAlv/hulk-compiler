type Vector
{
    head : Node11235 = null;
    tail : Node11235 = null;
    count = 0;
    index = 0;
    currentValue : Object = null;
    length() : Number => self.count;

    append(value : Object) : Object => let node = new Node11235(value) in
    {
        if(self.count == 0)
        {
            self.head := node;
            self.tail := node;
        }
        else
        {
            node.setPrevious(self.tail);
            self.tail.setNext(node);
            self.tail := node;
        };

        self.count := self.count + 1;
        node;
    };

    getNodeAt(index : Number) : Node11235 
    {
        index := floor(index);

        if (index < 0 | index >= self.count)
        {
            # error("Error: Index was outside of the bounds of the vector");
            print("Error: Index was outside of the bounds of the vector");
            new Node11235(null);   
        }
        else
        {
            let i = -1, current = new Node11235(null) in 
                while(i < index)
                {
                    if (i < 0)
                    {
                        current := self.head;
                    }
                    else 
                    {
                        current := current.getNext();
                    };

                    i := i + 1;
                    current;
                };
        };
    }

    element(index : Number) : Object => self.getNodeAt(index).getValue();

    set(index : Number, value : Object) : Object => let node = self.getNodeAt(index) in node.setValue(value);

    next() : Boolean =>
    if (self.index > self.count - 1)
    {
        self.index := 0;
        false;
    }
    else
    {
        self.currentValue := self.element(self.index);
        self.index := self.index + 1;
        true;
    };

    current() : Object => self.currentValue;
}

type Node11235(value : Object) 
{
    value = value;
    previous : Node11235 = null;
    next : Node11235 = null;
    getValue() : Object => self.value;
    setValue(value : Object) : Object => self.value := value; 
    getNext() : Node11235 => self.next;
    getPrevious() : Node11235 => self.previous;
    setNext(node : Node11235) : Node11235 => self.next := node;
    setPrevious(node : Node11235) : Node11235 => self.previous := node;
}

function floor(n : Number) : Number => let i = 0 in 
{
    while(i < n)
        i:= i + 1;

    if (i > n)
        i := i - 1
    else
        i;
};


type Range(st:Number, ed:Number, offset : Number) {
    st = st;
    ed = ed;
    current = st - offset;
    offset = offset;
    next(): Boolean => (self.current := self.current + self.offset) < self.ed;
    current(): Number => self.current;
}

function range(s: Number, e: Number): Range => new Range(s,e, 1);

function floatMod(x : Number, mod : Number)
{
    if(x >= 0)
    {
        while(x > mod)
        {
            x := x - mod;
        };
        x;
    }
    else
    {
        while(x < mod)
        {
            x := x + mod;
        };
        if (x >= mod)
        {
            x := x - mod;
        }
        else
        {
            x;
        };
        x;
    };
} 

function sin(x: Number): Number =>
    let result = 0, pi = 3.141592653589793, div = floatMod(x, 2 * pi) in {
        x := div;
        for (i in range(0, 10)) 
        {
            let f = 1 in 
            { 
                for (j in range(1, 2 * i + 1)) {
                    f:= f * (j + 1) ;
                };
                let term = (-1)^i * x^(2*i + 1) / f in {
                    result := result + term;
                };
                
            };
        };
        result;
    };


function cos(x: Number): Number =>
    let cosine = 0, pi = 3.141592653589793, sign = 1, div = floatMod(x, 2 * pi) in {
        x := div;
        for (i in range(0, 10)) 
        {
            let f = 1 in 
            { 
                for (j in range(1, 2 * i)) {
                    f:= f * (j + 1) ;
                };
 
                let term = sign * x^(2*i) / f in {
                    cosine := cosine + term;
                    sign := sign * (-1);
                };
            };
        };
        cosine;
    };

function abss(a: Number): Number {
    if (a > 0) a else -a;
}

function sqrt(x:Number): Number {
    if (x < 0) 0 else
    let guess = x / 2 in {
        let mk = true in {
            while (mk == true) {
                let next_guess = (guess + x / guess) / 2 in {
                    if (abss(next_guess - guess) < 0.000001) mk := false else 1;
                    guess := next_guess;
                };
            };
        };
        guess;
    };
}